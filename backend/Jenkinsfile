pipeline {
    agent any
    environment {
        AWS_REGION = 'ap-southeast-2'
        ECR_REPO = 'demoecs'
        IMAGE_TAG = "${BUILD_NUMBER}"
        GIT_REPO = 'git@github.com:ronzhang0828/demoECS_Deployment.git'
        GIT_BRANCH = 'deploy'
        ECR_PASSWORD_STDIN = "541730394177.dkr.ecr.ap-southeast-2.amazonaws.com/demoecs"
        ECS_CLUSTER = ''
        ECS_SERVICE = ''
    }

    stages {
        stage('checkout code') {
            steps {
                script {
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: "*/${GIT_BRANCH}"]],
                        userRemoteConfigs: [[
                            credentialsId: 'GITHUB_SSH',  // 这里用 SSH 认证
                            url: GIT_REPO]]
                    ])
                }
            }
        }
        stage('login to AWS ECR') {
            steps {
                withAWS(credentials: 'JenkinsAccessCredential', region: "${AWS_REGION}") {
                    sh """
                    aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_PASSWORD_STDIN}
                    """
                }
            }
        }
        stage('build and push docker image') {
            steps {
                script {
                    sh """
                    cd backend
                    docker build -t ${ECR_REPO}:${IMAGE_TAG} .
                    docker tag ${ECR_PASSWORD_STDIN}:${IMAGE_TAG}
                    docker push ${ECR_PASSWORD_STDIN}:${IMAGE_TAG}
                    """
                }
            }
        }
        stage('deploy to ECS') {
            steps {
                withAWS(credentials: 'JenkinsAccessCredential', region: "${AWS_REGION}") {
                    sh """
                    aws ecs update-service --cluster ${ECS_CLUSTER} --service ${ECS_SERVICE} --force-new-deployment
                    """
                }
            }
        }
    }
}
post {
    always {
        echo "Cleaning up Docker images and containers..."
        sh """
        docker system prune -af --volumes
        """
        echo "Cleaning up Jenkins workspace..."
        dir('backend') {
            deleteDir()
        }
    }
}